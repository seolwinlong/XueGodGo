package main

import "fmt"

// 闭包

func AddUpper(int) int {
	var n = 10
	return func(x int) int {
		n = n + x
		return n
	}
}

func main() {
	//说到Go语言的闭包，不得不说全局变量，局部变量及闭包之间的区别
	//全局变量：1、常驻内存，2、污染全局
	//局部变量：1、不常驻内存，2、不污染全局
	//闭包：1、可以让变量常驻内存，2、可以让变量不污染全局

	/*	闭包：
		1.闭包是指有权访问另一个函数作用域中的变量的函数
		2.创建闭包的常见方式就是在一个函数内部创建另一个函数， 内函数可以访问外函数的变量
		注意：闭包里作用域返回的局部变量不会被立刻销毁回收，但过度使用闭包可能会占用更多内存，导致
		性能下降。
		闭包是由函数及其相关引用环境组合而成的实体(即：闭包=函数+引用环境)。*/

	f := AddUpper
	fmt.Println(f(1))
	fmt.Println(f(2))
	fmt.Println(f(3))

	//AddUpper()函数返回一个闭包函数对象，返回的闭包函数对象捕获了外层的n变量。
	//重点：闭包函数不会被GC（垃圾回收机制）回收所占用资源，因此会出现外部调用时会接着上次调用的结果
}
